---
layout: post
title:  "JWT vulnerabilities can compromise your website"
date:   2022-08-24 15:43:21 +0200
categories: Vulnerabilities
author: Clara HÃ¤llgren
---

Vulnerabilities in JSON web tokens can compromise your web service or site and have critical impact on your business.
But what is a JWT really? And what vulnerabilities can come with them?

### JSON Web Tokens

JSON Web Tokens (JWT) is a standardised way of sending encrypted data between two entities and is most commonly used in authentication and session handling.
JWTs is a beloved friend of many developers (including mine) as it stores all data that the server may need on the client side, which is its main selling point when compared to a classic session token.
This makes JWTs a popular choice for distributed sites where users seamlessly needs to interact with several back-end servers.
Although, if the implementation is faulty, anyone with access to a JWT can cause critical damage.

#### Components

To understand how a hacker can cause critical damage using a JWT we first need to understand its components. A JWT has by definition a header, a payload and a signature
all separated by a dot (.). The `header` contains metadata about the token itself, while the `payload` usually contains the actual information that is communicated (also known as claims).
In most cases anyone with the token can read its content as it is only Base64 encoded. But if it is possible to modify the content or not is dependent on the security of the signature and its verification.

    Header.Payload.Signature

#### The very important signature

The signature of a JWT makes it possible for the receiving server to know if it has been modified which in security terms is called "to determine its integrity".
When a JWT is created, for example at login, the signature is generated by encrypting the content of the header and the payload with a secret key.
Then, to determine the integrity of the JWT the signature is decrypted with the same secret key and the content of the signature is matched with the content of the header and the payload.
Doesn't the contents match? Well, that means that the JWT has been modified and should be discarded.


### ..This sounds secure? right?

Well, that's not certain. JWTs are flexible in its structure which allows developers to configure the details in the implementation and can thereby introduce vulnerabilities.
Sometimes the JWT isn't verified or the verification can be bypassed. And even if the signature verification is reliable, maybe the secret key isn't really a secret? Just like most passwords, there is always a risk that somebody can crack it.
And yes, It is both simple and efficient to crack a bad signature password, something I will demonstrate in a later post.  

